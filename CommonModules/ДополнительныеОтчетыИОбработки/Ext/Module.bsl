///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
//
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////#Область СлужебныеПроцедурыИФункции

&Вместо("ВыполнитьКомандуВнешнегоОбъекта")
Функция РДО_ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата)
    РезультатИзменен = Ложь;
	Результат = ПродолжитьВызов(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата);  
	
	СведенияОВнешнемОбъекте = ВнешнийОбъект.СведенияОВнешнейОбработке(); // см. СведенияОВнешнейОбработке
	
	ВидОбработки = ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СведенияОВнешнемОбъекте.Вид);
	
	ПередаватьПараметры = (
		СведенияОВнешнемОбъекте.Свойство("ВерсияБСП")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СведенияОВнешнемОбъекте.ВерсияБСП, "1.2.1.4") >= 0);
	
	РезультатВыполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "РезультатВыполнения");
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		ПараметрыКоманды.Вставить("РезультатВыполнения", Новый Структура());
	КонецЕсли;

	Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ОтправкаОбъектов Тогда

		РезультатИзменен = Истина;
		ОбъектыНазначения = Неопределено;
		ПараметрыКоманды.Свойство("ОбъектыНазначения", ОбъектыНазначения);
		
		ВыполнитьНазначаемуюКомандуДополнительногоОтчетаИлиОбработки(
			ВнешнийОбъект,
			ИдентификаторКоманды,
			?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
			ОбъектыНазначения
		); 
		
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.HTTPСервис Тогда  

		РезультатИзменен = Истина;
		
		ВыполнитьКомандуHTTPСервиса(
			ВнешнийОбъект,
			ИдентификаторКоманды,
			ПараметрыКоманды
		);  

	КонецЕсли; 
	
	Если РезультатИзменен Тогда

		Если ТипЗнч(АдресРезультата) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
			ПоместитьВоВременноеХранилище(ПараметрыКоманды.РезультатВыполнения, АдресРезультата);
		КонецЕсли; 
		
		Результат = ПараметрыКоманды.РезультатВыполнения;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&Вместо("ПолучитьВидОбработкиПоСтроковомуПредставлениюВида")
Функция РДО_ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СтроковоеПредставление)
	Если СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтправкаОбъектов() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ОтправкаОбъектов;	
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиHTTPСервис() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.HTTPСервис;	
	Иначе
		Возврат ПродолжитьВызов(СтроковоеПредставление);
	КонецЕсли;
КонецФункции 

Процедура ВыполнитьКомандуHTTPСервиса(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды)  
	ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды);
КонецПроцедуры   

&После("ПриОпределенииКомандПодключенныхКОбъекту")
Процедура РДО_ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды)
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НазначениеДополнительныхОбработок) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НастройкиФормы.ЭтоФормаОбъекта Тогда
		ТипФормы = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта();
	Иначе
		ТипФормы = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка();
	КонецЕсли;
	
	УстанавливатьПараметрыФО = (Метаданные.ОбщиеКоманды.Найти("СозданиеСвязанныхОбъектов") <> Неопределено);
	Если УстанавливатьПараметрыФО Тогда
		НастройкиФормы.ФункциональныеОпции.Вставить("ДополнительныеОтчетыИОбработкиОбъектНазначения", Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
		НастройкиФормы.ФункциональныеОпции.Вставить("ДополнительныеОтчетыИОбработкиТипФормы",         ТипФормы);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыОбъектов = Новый Массив;
	ИсточникиКоманд = Новый Соответствие;
	Для Каждого Источник Из Источники.Строки Цикл
		Для Каждого ДокументРегистратор Из Источник.Строки Цикл
			ИдентификаторыОбъектов.Добавить(ДокументРегистратор.СсылкаМетаданных);
			ИсточникиКоманд.Вставить(ДокументРегистратор.СсылкаМетаданных, ДокументРегистратор);
		КонецЦикла;
		ИдентификаторыОбъектов.Добавить(Источник.СсылкаМетаданных);
		ИсточникиКоманд.Вставить(Источник.СсылкаМетаданных, Источник);
	КонецЦикла;  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Назначение.ОбъектНазначения КАК ОбъектНазначения,
		|	Назначение.ИспользоватьОтправкуОбъектов КАК ИспользоватьОтправкуОбъектов
		|ИЗ
		|	РегистрСведений.РДО_НазначениеДополнительныхОбработок КАК Назначение
		|ГДЕ
		|	Назначение.ОбъектНазначения В(&ИОМы)
		|	И Назначение.ТипФормы = &ТипФормы";
	Запрос.УстановитьПараметр("ИОМы", ИдентификаторыОбъектов);
	Если ТипФормы = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Назначение.ТипФормы = &ТипФормы", "");
	Иначе
		Запрос.УстановитьПараметр("ТипФормы", ТипФормы);
	КонецЕсли;
	
	ТипыОтправкаОбъектов = Новый Массив;
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаРегистра Цикл
		Если СтрокаТаблицы.ИспользоватьОтправкуОбъектов Тогда
			ПодключаемыеКоманды.ДополнитьМассивТипов(ТипыОтправкаОбъектов, Источник.ТипСсылкиДанных);
		КонецЕсли;
	КонецЦикла;        
	
	Если ТипыОтправкаОбъектов.Количество() > 0 Тогда
		Команда = Команды.Добавить();
		Команда.Вид                = "КоманднаяПанель";
		Команда.Представление      = НСтр("ru = 'Отправка объектов...'");
		Команда.Картинка           = БиблиотекаКартинок.Отправить;
		Команда.Порядок            = 50;
		Команда.Обработчик         = "ДополнительныеОтчетыИОбработкиКлиент.ОткрытьСписокКоманд";
		Команда.РежимЗаписи        = "Записывать";
		Команда.МножественныйВыбор = Истина;
		Команда.ТипПараметра       = Новый ОписаниеТипов(ТипыОтправкаОбъектов);
		Команда.ДополнительныеПараметры = ДополнительныеПараметрыКоманды(ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтправкаОбъектов(), Ложь);
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ПодключенныеОбъектыМетаданных")
Функция РДО_ПодключенныеОбъектыМетаданных(Вид)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Метаданные");
	Результат.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений"));
	Результат.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолноеПредставление", Новый ОписаниеТипов("Строка"));
	
	Результат.Индексы.Добавить("Ссылка");
	Результат.Индексы.Добавить("Вид");
	Результат.Индексы.Добавить("ПолноеИмя");
	
	МассивТиповИлиМетаданных = Новый Массив;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет   
		#Вставка
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ОтправкаОбъектов  
		#КонецВставки
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОпределяемыеТипы.ОбъектСДополнительнымиКомандами.Тип.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
			МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийСлужебный");
			МассивТиповИлиМетаданных = МодульШаблоныСообщенийСлужебный.ИсточникиШаблоновСообщений()
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
			МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
			МассивТиповИлиМетаданных = МодульУправлениеПечатью.ИсточникиКомандПечати()
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		МассивТиповИлиМетаданных = РазделыДополнительныхОбработок();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		МассивТиповИлиМетаданных = РазделыДополнительныхОтчетов();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для Каждого ТипИлиМетаданные Из МассивТиповИлиМетаданных Цикл
		Если ТипЗнч(ТипИлиМетаданные) = Тип("Тип") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИлиМетаданные);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ОбъектМетаданных = ТипИлиМетаданные;
		КонецЕсли;
		
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.Метаданные = ОбъектМетаданных;
		
		Если ОбъектМетаданных = ДополнительныеОтчетыИОбработкиКлиентСервер.ИмяНачальнойСтраницы() Тогда
			СтрокаТаблицы.ПолноеИмя = ДополнительныеОтчетыИОбработкиКлиентСервер.ИмяНачальнойСтраницы();
			СтрокаТаблицы.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
			СтрокаТаблицы.Вид = "Подсистема";
			СтрокаТаблицы.Представление = СтандартныеПодсистемыСервер.ПредставлениеНачальнойСтраницы();
		Иначе
			СтрокаТаблицы.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаТаблицы.Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			СтрокаТаблицы.Вид = Лев(СтрокаТаблицы.ПолноеИмя, СтрНайти(СтрокаТаблицы.ПолноеИмя, ".") - 1);
			СтрокаТаблицы.Представление = ОбъектМетаданных.Представление();
		КонецЕсли;
		
		СтрокаТаблицы.ПолноеПредставление = СтрокаТаблицы.Представление + " (" + СтрокаТаблицы.Вид + ")";
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&ИзменениеИКонтроль("СведенияОВнешнейОбработке")
Функция РДО_СведенияОВнешнейОбработке(ВерсияБСП)
	ПараметрыРегистрации = Новый Структура;

	ПараметрыРегистрации.Вставить("Вид", "");
	ПараметрыРегистрации.Вставить("Версия", "0.0");
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование", Неопределено);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Информация", Неопределено);
	ПараметрыРегистрации.Вставить("ВерсияБСП", ВерсияБСП);
	ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);

	РеквизитыТабличнойЧасти = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;

	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип); 
	#Вставка
	ТаблицаКоманд.Колонки.Добавить("Метод", РеквизитыТабличнойЧасти.Метод.Тип);
	#КонецВставки

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	ПараметрыРегистрации.Вставить("Разрешения", Новый Массив);

	Возврат ПараметрыРегистрации;
КонецФункции

&ИзменениеИКонтроль("ПодключитьВнешнююОбработку")
Функция РДО_ПодключитьВнешнююОбработку(Ссылка)

	СтандартнаяОбработка = Истина;
	Результат = Неопределено;

	ИнтеграцияПодсистемБСП.ПриПодключенииВнешнейОбработки(Ссылка, СтандартнаяОбработка, Результат);
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;

	// Проверка корректности переданных параметров.
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
		Или Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Подключение
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИмяОбработки = ПолучитьИмяВременногоФайла();
		ХранилищеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХранилищеОбработки");
		ДвоичныеДанные = ХранилищеОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяОбработки);
		Возврат ИмяОбработки;
	#КонецЕсли

	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Вид");
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;

	ПараметрыЗапуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "БезопасныйРежим, ХранилищеОбработки");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапуска.ХранилищеОбработки.Получить());

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		ИспользуютсяПрофилиБезопасности = МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности();
	Иначе
		ИспользуютсяПрофилиБезопасности = Ложь;
	КонецЕсли;

	Если ИспользуютсяПрофилиБезопасности Тогда

		МодульРаботаВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебный");
		БезопасныйРежим = МодульРаботаВБезопасномРежимеСлужебный.РежимПодключенияВнешнегоМодуля(Ссылка);

		Если БезопасныйРежим = Неопределено Тогда
			БезопасныйРежим = Истина;
		КонецЕсли;

	Иначе

		БезопасныйРежим = ПолучитьФункциональнуюОпцию("СтандартныеПодсистемыВМоделиСервиса") Или ПараметрыЗапуска.БезопасныйРежим;

		Если БезопасныйРежим Тогда
			ЗапросРазрешений = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДополнительныеОтчетыИОбработкиРазрешения.НомерСтроки,
			|	ДополнительныеОтчетыИОбработкиРазрешения.ВидРазрешения
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки.Разрешения КАК ДополнительныеОтчетыИОбработкиРазрешения
			|ГДЕ
			|	ДополнительныеОтчетыИОбработкиРазрешения.Ссылка = &Ссылка");
			ЗапросРазрешений.УстановитьПараметр("Ссылка", Ссылка);
			ЕстьРазрешений = Не ЗапросРазрешений.Выполнить().Пустой();

			РежимСовместимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РежимСовместимостиРазрешений");
			Если РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2
				И ЕстьРазрешений Тогда
				БезопасныйРежим = Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ЗаписатьПримечание(Ссылка, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подключение, %1 = ""%2"".'"), "БезопасныйРежим", БезопасныйРежим));
	#Вставка
	Если Ссылка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки Тогда
		Попытка
			ОбработкаОбъект = Менеджер.Создать(Ссылка.ПутьДоФайла + "\" + Ссылка.ИмяФайла, Ложь, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
		Исключение
			Представление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение Представление;
		КонецПопытки;
		
		ИмяОбработки = ОбработкаОбъект.Метаданные().Имя;
	Иначе
	#КонецВставки	
	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим,
		ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	#Вставка
	КонецЕсли;
	#КонецВставки
	Возврат ИмяОбработки;

КонецФункции

#КонецОбласти

